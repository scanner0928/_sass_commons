@charset "utf-8";

@mixin viewsiteMaxWidth {
  @content;
  max-width: var(--viewsiteMaxWidth, 1920px);
  margin: auto;
}

@mixin inner-wrapping($sp: true, $tab: true, $pc: true) {
  @if ($pc != true) {
    @include MQ(laptop) {
      --padding-h: 0;
    }
  }
  @if ($tab != true) {
    @include MQ(tablet-only) {
      --padding-h: 0;
    }
  }
  @if ($sp != true) {
    @include MQ(sp-only) {
      --padding-h: 0;
    }
  }
  padding-left: calc(var(--padding-h));
  padding-right: calc(var(--padding-h));
  @content;
  &-inner {
    max-width: var(--inner-maxWidth);
    margin-left: auto;
    margin-right: auto;
  }
  .is-negative_left {
    margin-left: calc(var(--padding-h) * -1);
  }
}
@mixin inner-wrapping-negative-left($padding: false) {
  margin-left: calc(var(--padding-h) * -1);
}
@mixin inner-wrapping-negative-right($padding: false) {
  margin-right: calc(var(--padding-h) * -1);
}

@mixin inner-grid($width: false, $padding_left: false, $padding_right: false) {
  @if $width {
    --max_width: #{$width};
  } @else {
    --max_width: var(--inner-maxWidth, 96rem);
  }
  @if $padding_left {
    --padding-h-left: #{$padding_left};
  } @else {
    --padding-h-left: var(--padding-h);
  }
  @if $padding_right {
    --padding-h-right: #{$padding_right};
  } @else {
    --padding-h-right: var(--padding-h);
  }
  display: grid;
  grid-template-columns:
    minmax(var(--padding-h-left), 1fr)
    minmax(auto, var(--max_width))
    minmax(var(--padding-h-right), 1fr);

  & > * {
    grid-column: 2;
    width: 100%;
    min-height: 0;
    min-width: 0;
  }

  & > .-full_nopadding {
    grid-column: 1 / 4;
    justify-self: center;
    width: 100%;
  }
  & > .-full {
    grid-column: 1 / 4;
    justify-self: center;
    width: 100%;
    padding-right: calc((100% - var(--max_width)) / 2);
    padding-left: calc((100% - var(--max_width)) / 2);
  }
  & > .-left {
    grid-column: 1 / 3;
    justify-self: flex-start;
  }
  & > .-right {
    grid-column: 2 / 4;
    justify-self: flex-end;
  }
  & > .-align_left {
    @include inner-grid-negative-left();
    padding-right: var(--padding-h);
    margin-right: auto;
  }
  & > .-align_right {
    @include inner-grid-negative-right();
    padding-left: var(--padding-h);
    margin-left: auto;
  }
  & > .-max_width {
    max-width: var(--inner-minWidth, 80rem);
  }
}
@mixin inner-grid-negative($padding: false) {
  grid-column: 1 / 4 !important;
  justify-items: center;
  width: 100%;
  @if ($padding) {
    // padding: 0 calc((100% - var(--max_width)) / 2);
    padding-left: var(--padding-h);
    padding-right: var(--padding-h);
  }
}
@mixin inner-grid-negative-left($padding: false) {
  grid-column: 1 / 3 !important;
  justify-items: flex-start;
  @if ($padding) {
    padding-left: var(--padding-h);
    padding-right: var(--padding-h);
    // padding: 0 calc((100% - var(--max_width)) / 2);
  }
}
@mixin inner-grid-negative-right($padding: false) {
  grid-column: 2 / 4 !important;
  justify-items: flex-end;
  @if ($padding) {
    // padding: 0 calc((100% - var(--max_width)) / 2);
    padding-left: var(--padding-h);
    padding-right: var(--padding-h);
  }
}
/* wrapper */
@mixin inner($sp: true, $tab: true, $pc: true, $ratio: 1) {
  @if ($pc != true) {
    @include MQ(laptop) {
      --padding-h: 0;
    }
  }
  @if ($tab != true) {
    @include MQ(tablet-only) {
      --padding-h: 0;
    }
  }
  @if ($sp != true) {
    @include MQ(sp-only) {
      --padding-h: 0;
    }
  }
  padding-left: calc(var(--padding-h) * #{$ratio});
  padding-right: calc(var(--padding-h) * #{$ratio});
  @content;
}
@mixin inner-vertical($sp: true, $tab: true, $pc: true, $ratio: 1) {
  @if ($pc != true) {
    @include MQ(laptop) {
      --padding-v: 0;
    }
  }
  @if ($tab != true) {
    @include MQ(tablet-only) {
      --padding-v: 0;
    }
  }
  @if ($sp != true) {
    @include MQ(sp-only) {
      --padding-v: 0;
    }
  }
  padding-top: calc(var(--padding-v) * #{$ratio});
  padding-bottom: calc(var(--padding-v) * #{$ratio});
  @content;
}
@mixin inner-all($sp: true, $tab: true, $pc: true, $ratio-v: 1, $ratio-h: 1) {
  @content;
  @if ($pc != true) {
    @include MQ(laptop) {
      --padding-h: 0;
      --padding-v: 0;
    }
  }
  @if ($tab != true) {
    @include MQ(tablet-only) {
      --padding-h: 0;
      --padding-v: 0;
    }
  }
  @if ($sp != true) {
    @include MQ(sp-only) {
      --padding-h: 0;
      --padding-v: 0;
    }
  }
  padding: calc(var(--padding-v) * #{$ratio-v}) calc(var(--padding-h) * #{$ratio-h});
}

@mixin inner-negative($sp: true, $tab: true, $pc: true, $left: true, $right: true) {
  @content;
  @if $pc {
    @include MQ(laptop) {
      @if $left {
        margin-left: calc(var(--padding-h) * -1);
      }
      @if $right {
        margin-right: calc(var(--padding-h) * -1);
      }
    }
  }
  @if $tab {
    @include MQ(tablet-only) {
      @if $left {
        margin-left: calc(var(--padding-h) * -1);
      }
      @if $right {
        margin-right: calc(var(--padding-h) * -1);
      }
    }
  }
  @if $sp {
    @include MQ(sp-only) {
      @if $left {
        margin-left: calc(var(--padding-h) * -1);
      }
      @if $right {
        margin-right: calc(var(--padding-h) * -1);
      }
    }
  }
}

/* layout */
@mixin margin-firstChild-spOnly($marginTop: 1em) {
  @include MQ(sp-only) {
    & > * {
      &:not(:first-child) {
        margin-top: $marginTop;
      }
    }
  }
}
@mixin margin-vertical($top: true, $bottom: true, $ratio: 1) {
  @content;
  // @include MQ(lower-tablet) {
  @if $top {
    margin-top: calc(var(--margin-v) * #{$ratio});
  }
  @if $bottom {
    margin-bottom: calc(var(--margin-v) * #{$ratio});
  }
}

@mixin padding-vertical($top: true, $bottom: true, $ratio: 1) {
  @content;
  @if $top {
    padding-top: calc(var(--padding-v) * #{$ratio});
  }
  @if $bottom {
    padding-bottom: calc(var(--padding-v) * #{$ratio});
  }
}
@mixin padding-horizon($left: true, $right: true, $ratio: 1) {
  @content;
  @if $left {
    padding-left: calc(var(--padding-h) * #{$ratio});
  }
  @if $right {
    padding-right: calc(var(--padding-h) * #{$ratio});
  }
}
@mixin padding-all($ratio-v: 1, $ratio-h: 1) {
  @content;
  padding: calc(var(--padding-v) * #{$ratio-v}) calc(var(--padding-h) * #{$ratio-h});
}

@mixin flex-verticalmiddle {
  display: -webkit-flex;
  display: flex;
  -js-display: flex;
  -webkit-flex-direction: column;
  flex-direction: column;
  -webkit-justify-content: center;
  justify-content: center;
}
@mixin flex-column_pc-odd_reverse($break: 'laptop') {
  &:not(:first-child) {
    margin-top: var(--margin-top, 5vh);
  }
  @include MQ(#{$break}) {
    display: -webkit-flex;
    display: flex;
    -js-display: flex;
    &:nth-of-type(2n) {
      -webkit-flex-direction: row-reverse;
      flex-direction: row-reverse;
      margin-left: auto;
    }
  }
}
